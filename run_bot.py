import os
import django
import asyncio
from datetime import date

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FoodPlanBot.settings')
django.setup()

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from asgiref.sync import sync_to_async

from bot_admin.models import Recipe, DailyRecipeLimit, UserRecipeInteraction
from bot_data.keyboards import create_inline_keyboard, private


BOT_TOKEN = "8017797463:AAHs0PihkrEE8ceBQUt_pa5IVblCXumKsy4"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

router = Router()
dp.include_router(router)


async def send_recipe(message: Message):
    global recipe
    recipe, reason = await sync_to_async(Recipe.get_recipe_for_user)(message.from_user.id)
    if recipe:
        await message.answer_photo(
             photo=types.FSInputFile(recipe.image.path),
             caption=f"üçΩ {recipe.title}\n\n{recipe.description}",
             reply_markup=create_inline_keyboard()
        )
    elif reason == "empty":
        await message.answer("–†–µ—Ü–µ–ø—Ç—ã –ø–æ–∫–∞ —á—Ç–æ –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ üë®‚Äçüç≥")
    elif reason == "limit":
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 3 —Ä–µ—Ü–µ–ø—Ç–∞ —Å–µ–≥–æ–¥–Ω—è üôÉ")


@router.message(F.text.lower() == '—Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç')
async def get_recipe(message: types.Message):
    await send_recipe(message)


@router.message(F.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã')
async def get_ingredients(message: types.Message):
    def get_last_recipe():
        record = DailyRecipeLimit.objects.filter(
            tg_user_id=message.from_user.id,
            date=date.today()
        ).first()
        return record.last_recipe if record and record.last_recipe else None

    last_recipe = await sync_to_async(get_last_recipe)()

    if last_recipe:
        await message.answer(
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –±–ª—é–¥–∞ ¬´{last_recipe.title}¬ª:\n\n{last_recipe.ingredients}"
        )
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Ä–µ—Ü–µ–ø—Ç, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.")


@router.message(Command("start"))
async def welcome_and_send_recipe(message: Message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.answer_photo(
            photo=types.FSInputFile("media/welcome_dish.jpg"),
            caption=(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>FoodPlan</b>!\n\n"
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –≤–∫—É—Å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ–µ –∏ –±—é–¥–∂–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ."
            ),
            parse_mode="HTML"
        )
    except Exception:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodPlan!\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –≤–∫—É—Å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ–µ –∏ –±—é–¥–∂–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ."
        )

    await get_recipe(message)


@router.message(F.text.lower() == '–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫')
async def like_recipe(message: Message):
    def get_last_recipe():
        record = DailyRecipeLimit.objects.filter(
            tg_user_id=message.from_user.id,
            date=date.today()
        ).first()
        return record.last_recipe if record and record.last_recipe else None

    last_recipe = await sync_to_async(get_last_recipe)()

    if last_recipe:
        await sync_to_async(UserRecipeInteraction.objects.update_or_create)(
            tg_user_id=message.from_user.id,
            recipe=last_recipe,
            defaults={"liked": True}
        )
        await message.answer("‚ù§Ô∏è –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Ä–µ—Ü–µ–ø—Ç, —á—Ç–æ–±—ã –µ–≥–æ –ª–∞–π–∫–Ω—É—Ç—å.")


@router.message(F.text.lower() == '–º–æ–∏ –ª–∞–π–∫–∏')
async def show_liked_recipes(message: Message):
    def get_liked_recipes():
        return list(UserRecipeInteraction.objects.filter(
            tg_user_id=message.from_user.id,
            liked=True
        ).select_related('recipe'))

    interactions = await sync_to_async(get_liked_recipes)()

    if interactions:
        for interaction in interactions:
            recipe = interaction.recipe
            caption = (
                f"<b>{recipe.title}</b>\n\n"
                f"{recipe.description}\n\n"
                f"<i>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</i>\n{recipe.ingredients}"
            )
            try:
                await message.answer_photo(
                    photo=types.FSInputFile(recipe.image.path),
                    caption=caption,
                    parse_mode="HTML"
                )
            except Exception:
                await message.answer(caption, parse_mode="HTML")
    else:
        await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.")


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
