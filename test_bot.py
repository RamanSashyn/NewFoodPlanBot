import os
import django
import asyncio
from datetime import date

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FoodPlanBot.settings')
django.setup()

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from asgiref.sync import sync_to_async

from bot_admin.models import Recipe, DailyRecipeLimit
from bot_data.keyboards import create_inline_keyboard, private


BOT_TOKEN = "7649928424:AAGNpZk9rzoeNgyxEyo71i5389w3ahY9y1U"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

router = Router()
dp.include_router(router)


@router.message(Command("start"))
async def welcome_and_send_recipe(message: Message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.answer_photo(
            photo=types.FSInputFile("media/welcome_dish.jpg"),
            caption=(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>FoodPlan</b>!\n\n"
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –≤–∫—É—Å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ–µ –∏ –±—é–¥–∂–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ."
            ),
            parse_mode="HTML"
        )
    except Exception:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodPlan!\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –≤–∫—É—Å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ–µ –∏ –±—é–¥–∂–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ."
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe = await sync_to_async(Recipe.get_recipe_for_user)(message.from_user.id)

    if recipe:
        caption = (
            f"<b>{recipe.title}</b>\n\n"
            f"{recipe.description}\n\n"
            f"<i>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</i>\n{recipe.ingredients}"
        )
        await message.answer_photo(

            photo=types.FSInputFile(recipe.image.path),
            caption=caption,
            parse_mode="HTML",
            reply_markup=create_inline_keyboard()
        )
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 3 —Ä–µ—Ü–µ–ø—Ç–∞ —Å–µ–≥–æ–¥–Ω—è")

# –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–µ—Ü–µ–ø—Ç—É
@router.message(Command("buylist"))
async def show_ingredients(message: Message):
    record = await sync_to_async(
        lambda: DailyRecipeLimit.objects.filter(
            tg_user_id=message.from_user.id,
            date=date.today()
        ).first()
    )()

    if record and record.last_recipe:
        await message.answer(
            f"–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –±–ª—é–¥–∞ ¬´{record.last_recipe.title}¬ª:\n\n{record.last_recipe.ingredients}"
        )
    else:
        await message.answer(
            "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç."
        )


async def send_recipe(message: Message):
    recipe = await sync_to_async(Recipe.get_recipe_for_user)(message.from_user.id)

    if recipe:
        await message.answer_photo(
             photo=types.FSInputFile(recipe.image.path),
             caption=f"üçΩ {recipe.title}\n\n{recipe.description}",
             reply_markup=create_inline_keyboard()
        )
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 3 —Ä–µ—Ü–µ–ø—Ç–∞ —Å–µ–≥–æ–¥–Ω—è üôÉ")


@router.message(F.text.lower() == '—Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç')
async def with_puree(message: types.Message):
    await send_recipe(message)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())